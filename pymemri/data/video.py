# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/data.video.ipynb (unless otherwise specified).

__all__ = ['Video']

# Cell
from .schema import Item

# Cell
from .schema import *
from .basic import *

from os import remove
from random import randint
import ffmpeg

# Cell

# A video file.
class Video(Item):
    def __init__(self, dateAccessed=None, dateCreated=None, dateModified=None, deleted=None,
                 externalId=None, itemDescription=None, starred=None, version=None, id=None, importJson=None,
                 bitrate=None, duration=None, endTime=None, fileLocation=None, startTime=None, caption=None,
                 exifData=None, name=None, width=None, height=None, changelog=None, label=None, genericAttribute=None, measure=None,
                 sharedWith=None, file=None, includes=None, thumbnail=None):
        super().__init__(dateAccessed=dateAccessed, dateCreated=dateCreated, dateModified=dateModified,
                         deleted=deleted, externalId=externalId, itemDescription=itemDescription, starred=starred,
                         version=version, id=id, importJson=importJson, changelog=changelog, label=label,
                         genericAttribute=genericAttribute, measure=measure, sharedWith=sharedWith)
        self.bitrate = bitrate
        self.duration = duration
        self.endTime = endTime
        self.fileLocation = fileLocation
        self.startTime = startTime
        self.caption = caption
        self.exifData = exifData
        self.name = name
        self.width = width
        self.height = height
        self.file = file if file is not None else []
        self.includes = includes if includes is not None else []
        self.thumbnail = thumbnail if thumbnail is not None else []

    @classmethod
    def from_json(cls, json):
        all_edges = json.get("allEdges", None)
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        id = json.get("id", None)
        importJson = json.get("importJson", None)
        bitrate = json.get("bitrate", None)
        duration = json.get("duration", None)
        endTime = json.get("endTime", None)
        fileLocation = json.get("fileLocation", None)
        startTime = json.get("startTime", None)
        caption = json.get("caption", None)
        exifData = json.get("exifData", None)
        name = json.get("name", None)
        width = json.get("width", None)
        height = json.get("height", None)

        changelog = []
        label = []
        genericAttribute = []
        measure = []
        sharedWith = []
        file = []
        includes = []
        thumbnail = []

        if all_edges is not None:
            for edge_json in all_edges:
                edge = Edge.from_json(edge_json)
                if edge._type == "changelog" or edge._type == "~changelog":
                    changelog.append(edge)
                elif edge._type == "label" or edge._type == "~label":
                    label.append(edge)
                elif edge._type == "genericAttribute" or edge._type == "~genericAttribute":
                    genericAttribute.append(edge)
                elif edge._type == "measure" or edge._type == "~measure":
                    measure.append(edge)
                elif edge._type == "sharedWith" or edge._type == "~sharedWith":
                    sharedWith.append(edge)
                elif edge._type == "file" or edge._type == "~file":
                    file.append(edge)
                elif edge._type == "includes" or edge._type == "~includes":
                    includes.append(edge)
                elif edge._type == "thumbnail" or edge._type == "~thumbnail":
                    thumbnail.append(edge)

        res = cls(dateAccessed=dateAccessed, dateCreated=dateCreated, dateModified=dateModified,
                  deleted=deleted, externalId=externalId, itemDescription=itemDescription, starred=starred,
                  version=version, id=id, importJson=importJson, bitrate=bitrate, duration=duration,
                  endTime=endTime, fileLocation=fileLocation, startTime=startTime, caption=caption, exifData=exifData,
                  name=name, width=width, height=height, changelog=changelog, label=label, genericAttribute=genericAttribute, measure=measure,
                  sharedWith=sharedWith, file=file, includes=includes, thumbnail=thumbnail)
        for e in res.get_all_edges(): e.source = res
        return res

    @classmethod
    def from_bytes(cls, data):
        name = "".join([str(randint(0, 9)) for i in range(16)])
        path = f"/tmp/{name}"
        with open(path, 'wb') as fd:
            fd.write(data)
        return cls.from_path(path)

    @classmethod
    def from_path(cls, path):
        probe = ffmpeg.probe(path)
        # TODO: Set all exif data
        attrs_dict = {
            'width': int(probe['streams'][0]['width']),
            'height': int(probe['streams'][0]['height']),
            'bitrate': int(probe['format']['bit_rate']),
            'duration': int(probe['format']['duration'].split('.')[0]),
            'fileLocation': path
        }
        return cls.from_data(**attrs_dict)
