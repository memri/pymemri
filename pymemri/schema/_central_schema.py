# AUTOGENERATED, DO NOT EDIT!
# This file was generated by /tools/generate_central_schema.sh
# Visit https://gitlab.memri.io/memri/schema to learn more

from datetime import datetime
from typing import Any, List, Optional, Union

from pymemri.schema.item import Item


class Account(Item):
    # Properties
    avatarUrl: str = None
    authEmail: str = None
    code: str = None
    displayName: str = None
    externalId: str = None
    handle: str = None
    identifier: str = None
    isMe: bool = None
    itemType: str = None
    secret: str = None
    service: str = None
    accessToken: str = None
    refreshToken: str = None
    # Edges
    changelog: List["AuditItem"] = []
    cryptoTransaction: List["CryptoTransaction"] = []
    location: List["Location"] = []
    network: List["Network"] = []
    ownCurrency: List["CryptoCurrency"] = []
    owner: List["Person"] = []
    trust: List["Account"] = []
    profilePicture: List["Photo"] = []


class AuditItem(Item):
    # Properties
    actionname: str = None
    content: str = None
    date: datetime = None


class CVUStoredDefinition(Item):
    # Properties
    definition: str = None
    domain: str = None
    itemType: str = None
    name: str = None
    queryStr: str = None
    renderer: str = None
    selector: str = None
    definitionType: str = None


class CategoricalPrediction(Item):
    # Properties
    source: str = None
    value: str = None
    probs: str = None
    # Edges
    model: List["Model"] = []


class CreativeWork(Item):
    # Properties
    abstract: str = None
    content: str = None
    datePublished: datetime = None
    itemType: str = None
    keyword: str = None
    textContent: str = None
    title: str = None
    transcript: str = None
    # Edges
    contentLocation: List["Location"] = []
    file: List["File"] = []
    locationCreated: List["Location"] = []
    writtenBy: List["Person"] = []


class CryptoCurrency(Item):
    # Properties
    myToken: float = None
    name: str = None
    topic: str = None
    # Edges
    currencySetting: List["CurrencySetting"] = []
    picture: List["Photo"] = []


class CryptoKey(Item):
    # Properties
    active: bool = None
    itemType: str = None
    keystr: str = None
    name: str = None
    role: str = None
    starred: bool = None
    # Edges
    owner: List["Person"] = []


class CryptoTransaction(Item):
    # Properties
    outward: bool = None
    quantity: float = None
    # Edges
    cryptoCurrency: List["CryptoCurrency"] = []
    relateToOther: List["Account"] = []
    relateToOwner: List["Account"] = []


class CurrencySetting(Item):
    # Properties
    deviceAddress: str = None
    profileAddress: str = None
    seedPhrase: str = None
    tokenAddress: str = None
    # Edges
    wallet: List["Wallet"] = []


class Dataset(Item):
    # Properties
    name: str = None
    queryStr: str = None
    # Edges
    entry: List["DatasetEntry"] = []
    feature: List["ItemPropertySchema"] = []
    labellingTask: List["LabellingTask"] = []
    datasetType: List["DatasetType"] = []


class DatasetEntry(Item):
    # Properties
    skippedByLabeller: bool = None
    # Edges
    data: List[Union["Message", "Tweet", "EmailMessage"]] = []
    annotation: List["CategoricalLabel"] = []


class DatasetType(Item):
    # Properties
    name: str = None
    queryStr: str = None
    # Edges
    datasetPlugin: List["Plugin"] = []


class Diet(Item):
    # Properties
    abstract: str = None
    content: str = None
    datePublished: datetime = None
    duration: int = None
    itemType: str = None
    keyword: str = None
    name: str = None
    textContent: str = None
    title: str = None
    transcript: str = None
    # Edges
    contentLocation: List["Location"] = []
    file: List["File"] = []
    locationCreated: List["Location"] = []
    writtenBy: List["Person"] = []


class File(Item):
    # Properties
    filename: str = None
    keystr: str = None
    nonce: str = None
    sha256: str = None
    starred: bool = None


class Integrator(Item):
    # Properties
    name: str = None
    repository: str = None


class ItemEdgeSchema(Item):
    # Properties
    edgeName: str = None
    sourceType: str = None
    targetType: str = None


class ItemPropertySchema(Item):
    # Properties
    itemType: str = None
    propertyName: str = None
    valueType: str = None


class Label(Item):
    # Properties
    color: str = None
    name: str = None


class LabelAnnotation(Item):
    # Properties
    allowSharing: bool = None
    isSubmitted: bool = None


class LabelOption(Item):
    # Properties
    color: str = None
    name: str = None


class LabellingDataType(Item):
    # Properties
    name: str = None
    labelType: str = None


class LabellingTask(Item):
    # Properties
    name: str = None
    currentLabelOption: str = None
    # Edges
    taskType: List["TextClassification"] = []
    labelOption: List["LabelOption"] = []
    view: List["CVUStoredDefinition"] = []


class Location(Item):
    # Properties
    latitude: float = None
    longitude: float = None


class MediaObject(Item):
    # Properties
    bitrate: int = None
    duration: int = None
    endTime: datetime = None
    fileLocation: str = None
    startTime: datetime = None
    # Edges
    file: List["File"] = []
    includes: List["Person"] = []


class MedicalCondition(Item):
    # Properties
    conditiontype: str = None
    itemType: str = None
    name: str = None


class MessageChannel(Item):
    # Properties
    encrypted: bool = None
    externalId: str = None
    name: str = None
    topic: str = None
    service: str = None
    # Edges
    photo: List["Photo"] = []
    receiver: List["Account"] = []


class Model(Item):
    # Properties
    name: str = None
    version: str = None


class NavigationItem(Item):
    # Properties
    icon: str = None
    itemType: str = None
    sequence: int = None
    sessionName: str = None
    title: str = None


class Network(Item):
    # Properties
    name: str = None
    # Edges
    website: List["Website"] = []


class OauthFlow(Item):
    # Properties
    accessToken: str = None
    accessTokenSecret: str = None
    refreshToken: str = None
    service: str = None


class Person(Item):
    # Properties
    addressBookId: str = None
    birthDate: datetime = None
    deathDate: datetime = None
    displayName: str = None
    email: str = None
    firstName: str = None
    gender: str = None
    lastName: str = None
    role: str = None
    sexualOrientation: str = None
    starred: bool = None
    # Edges
    account: List["Account"] = []
    address: List["Address"] = []
    birthPlace: List["Location"] = []
    cryptoKey: List["CryptoKey"] = []
    deathPlace: List["Location"] = []
    diet: List["Diet"] = []
    hasPhoneNumber: List["PhoneNumber"] = []
    label: List["Label"] = []
    me: List["Person"] = []
    medicalCondition: List["MedicalCondition"] = []
    mergedFrom: List["Person"] = []
    profilePicture: List["Photo"] = []
    relationship: List["Relationship"] = []
    website: List["Website"] = []


class PhoneNumber(Item):
    # Properties
    phoneNumber: str = None


class Plugin(Item):
    # Properties
    bundleImage: str = None
    containerImage: str = None
    configJson: str = None
    config: str = None
    dataType: str = None
    icon: str = None
    pluginDescription: str = None
    name: str = None
    pluginModule: str = None
    pluginName: str = None
    pluginType: str = None
    gitProjectId: int = None
    # Edges
    view: List["CVUStoredDefinition"] = []


class Post(Item):
    # Properties
    externalId: str = None
    message: str = None
    postDate: datetime = None
    postType: str = None
    isMock: bool = None
    # Edges
    author: List["Account"] = []
    comment: List["Post"] = []
    parent: List["Post"] = []
    photo: List["Photo"] = []


class Project(Item):
    # Properties
    name: str = None
    gitlabUrl: str = None
    dataSource: str = None
    # Edges
    dataset: List["Dataset"] = []
    labellingPlugin: List["Plugin"] = []


class Receipt(Item):
    # Properties
    category: str = None
    store: str = None
    totalCost: float = None
    # Edges
    file: List["File"] = []
    photo: List["Photo"] = []


class Relationship(Item):
    # Properties
    label: str = None
    proximityValue: int = None
    # Edges
    relationship: List["Person"] = []


class Setting(Item):
    # Properties
    json: str = None
    keystr: str = None


class SuggestedMerge(Item):
    # Properties
    score: float = None
    task: str = None
    # Edges
    mergeFrom: List["Person"] = []


class VoteAction(Item):
    # Properties
    dateExecuted: datetime = None


class Wallet(Item):
    # Properties
    name: str = None
    # Edges
    picture: List["Photo"] = []


class Website(Item):
    # Properties
    itemType: str = None
    url: str = None


class WrittenWork(CreativeWork):
    pass


class Indexer(Integrator):
    # Properties
    bundleImage: str = None
    icon: str = None
    indexerClass: str = None
    itemDescription: str = None
    queryStr: str = None
    runDestination: str = None
    # Edges
    indexerRun: List["IndexerRun"] = []


class IndexerRun(Integrator):
    # Properties
    errorMessage: str = None
    progress: float = None
    progressMessage: str = None
    queryStr: str = None
    runStatus: str = None
    targetDataType: str = None
    # Edges
    indexer: List["Indexer"] = []


class CategoricalLabel(LabelAnnotation):
    # Properties
    labelValue: str = None


class TextClassification(LabellingDataType):
    pass


class Address(Location):
    # Properties
    city: str = None
    itemType: str = None
    locationAutoLookupHash: str = None
    postalCode: str = None
    state: str = None
    street: str = None
    # Edges
    changelog: List["AuditItem"] = []
    country: List["Country"] = []
    location: List["Location"] = []


class Country(Location):
    # Properties
    name: str = None
    # Edges
    flag: List["Photo"] = []
    location: List["Location"] = []


class Photo(MediaObject):
    # Properties
    caption: str = None
    exifData: str = None
    name: str = None
    # Edges
    changelog: List["AuditItem"] = []
    label: List["Label"] = []
    thumbnail: List["File"] = []


class Tweet(Post):
    # Properties
    service: str = None
    # Edges
    mention: List["Account"] = []


class Message(WrittenWork):
    # Properties
    dateReceived: datetime = None
    dateSent: datetime = None
    externalId: str = None
    service: str = None
    subject: str = None
    sourceProject: str = None
    isMock: bool = None
    # Edges
    message: List["Message"] = []
    messageChannel: List["MessageChannel"] = []
    photo: List["Photo"] = []
    receiver: List["Account"] = []
    sender: List["Account"] = []
    label: List["CategoricalPrediction"] = []


class Note(WrittenWork):
    # Properties
    starred: bool = None
    # Edges
    label: List["Label"] = []


class EmailMessage(Message):
    # Properties
    starred: bool = None
    # Edges
    bcc: List["Account"] = []
    cc: List["Account"] = []
    message: List["EmailMessage"] = []
    replyTo: List["Account"] = []
