# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/plugin.authenticators.oauth.ipynb (unless otherwise specified).

__all__ = ['OAuthAuthenticator', 'OAuth1Authenticator', 'OAuth2Authenticator']

# Cell
# hide
import abc
from time import sleep
from ..pluginbase import PluginBase
from ..states import RUN_USER_ACTION_NEEDED, RUN_USER_ACTION_COMPLETED, RUN_FAILED
from ..schema import PluginRun, Account
from ...pod.client import PodClient

# Cell
# hide

class OAuthAuthenticator(metaclass=abc.ABCMeta):

    SLEEP_INTERVAL = 1.0

    def __init__(self, client, pluginRun):
        self.client = client
        self.pluginRun = pluginRun

    def poll_for_code(self):
        while True:
            sleep(self.SLEEP_INTERVAL)
            self.pluginRun = self.client.get(self.pluginRun.id)
            if self.pluginRun.status == RUN_USER_ACTION_COMPLETED:
                return self.pluginRun.account[0].code
            if self.pluginRun.status == RUN_FAILED:
                raise Exception(f"Error in plugin.authenticators.oauth {self.pluginRun.message}")

    def present_url_to_user(self, url):
        # request user to visit url
        self.pluginRun.authUrl = url
        self.pluginRun.status = RUN_USER_ACTION_NEEDED
        self.pluginRun.update(self.client)

    def store_tokens(self, tokens):
        account = self.get_account()
        for key in tokens.keys():
            if tokens[key] and hasattr(account, key):
                setattr(account, key, tokens[key])
        account.update(self.client)

    def get_account(self):
        return self.pluginRun.account[0]

    @abc.abstractmethod
    def get_oauth_url(self):
        raise NotImplemented()

    @abc.abstractmethod
    def get_tokens_from_code(self, code):
        """ Gets access and refresh tokens from 3rd party service
            and returns them in form:
                {
                    'accessToken': '...',
                    'refreshToken': '...'
                } for OAuth v2
                or
                {
                    'identifier': '...',
                    'secret': '...'
                } for OAuth v1
        """
        raise NotImplemented()


# Cell
# hide

class OAuth1Authenticator(OAuthAuthenticator):

    def authenticate(self):
        me = self.get_account()
        try:
            self.set_tokens(me.identifier, me.secret)
            self.verify_tokens()
        except:
            url = self.get_oauth_url()
            self.present_url_to_user(url)
            code = self.poll_for_code()
            tokens = self.get_tokens_from_code(code)
            self.store_tokens(tokens)

    @abc.abstractmethod
    def set_tokens(self, key, secret):
        """
        Should set the tokens required for 3rd party API client.
        """
        raise NotImplemented()

    @abc.abstractmethod
    def verify_tokens(self, token):
        """
        Check if existing token is working. If this returns True, then user interaction will not be needed.
        """
        raise NotImplemented()

# Cell
# hide

class OAuth2Authenticator(OAuthAuthenticator):

    def authenticate(self):
        account = self.get_account()
        try:
            tokens = self.refresh_tokens(account.refreshToken)
        except: # no account exists or expired refresh token
            url = self.get_oauth_url()
            self.present_url_to_user(url)
            code = self.poll_for_code()
            tokens = self.get_tokens_from_code(code)
        finally:
            self.store_tokens(tokens)

    @abc.abstractmethod
    def refresh_tokens(self):
        """ Gets new tokens by using an existing refresh token
            and returns them in form:
                {
                    'accessToken': '...',
                    'refreshToken': '...'
                }

        """
        # use self.pluginRun.account[0].refreshToken
        raise NotImplemented()
