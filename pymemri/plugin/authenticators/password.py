# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/plugins.authenticators.password.ipynb (unless otherwise specified).

__all__ = ['PasswordAuthenticator', 'simulate_enter_password']

# Cell
# hide

import abc
from time import sleep
from pathlib import Path

import pymemri
from ...data.basic import read_file
from ...cvu.utils import get_default_cvu
from ..states import RUN_USER_ACTION_NEEDED, RUN_USER_ACTION_COMPLETED
from ...data.schema import CVUStoredDefinition
import time

# Cell
# hide

class PasswordAuthenticator:
    DEFAULT_CVU = "password_auth.cvu"
    MAX_LOGIN_ATTEMPTS = 3
    SLEEP_INTERVAL = 1.0
    MAX_POLL_TIME = 600

    def __init__(self, client, pluginRun):
        self.client = client
        self.pluginRun = pluginRun
        self.isTest = False

    def authenticate(self, login_callback):
        self.request_user_credentials()

        login_success = False
        for i in range(self.MAX_LOGIN_ATTEMPTS):
            username, password = self.poll_credentials()
            try:
                login_callback(username, password)
                login_success = True
                break
            except Exception as e:
                print("Login failed, invalid credentials.")
                if self.pluginRun.account:
                    attempts_remaining = self.MAX_LOGIN_ATTEMPTS - (i + 1)
                    account = self.pluginRun.account[0]
                    account.errorMessage = f"Reached max login attempts. {attempts_remaining} attempts remaining"
                    self.client.update_item(account)

        if not login_success:
            self.pluginRun.status = "error"
            self.client.update_item(self.pluginRun)

            if self.pluginRun.account:
                account = self.pluginRun.account[0]
                account.errorMessage = "Reached max login attempts."
                self.client.update_item(account)

            raise RuntimeError("Reached max login attempts.")

    def request_user_credentials(self):
        cvu = get_default_cvu(self.DEFAULT_CVU)
        self.client.create(cvu)
        self.pluginRun.add_edge("view", cvu)
        self.client.create_edge(self.pluginRun.get_edges("view")[0])
        self.pluginRun.status = RUN_USER_ACTION_NEEDED
        self.client.update_item(self.pluginRun)

    def poll_credentials(self):
        start_time = time.time()
        while True:
            if time.time() - start_time > self.MAX_POLL_TIME:
                self.pluginRun.status = "error"
                self.client.update_item(self.pluginRun)
                raise RuntimeError("Stop polling, max time reached.")

            sleep(self.SLEEP_INTERVAL)
            self.pluginRun = self.client.get(self.pluginRun.id)
            print(f"polling for credentials... run.status={self.pluginRun.status}")
            if self.pluginRun.status == RUN_USER_ACTION_COMPLETED:
                account = self.pluginRun.account[0]
                return account.identifier, account.secret

# Cell
def simulate_enter_password(pod_client, run_id, username, password):
    run = pod_client.get(run_id)
    account = run.account[0]
    account.identifier = username
    account.secret = password
    run.status = "ready"

    pod_client.update_item(account)
    pod_client.update_item(run)