# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/plugin.authenticators.password.ipynb (unless otherwise specified).

__all__ = ['LOGIN_CVU', 'PasswordAuthenticator']

# Cell
# hide

import abc
from time import sleep
from ..states import RUN_USER_ACTION_NEEDED, RUN_USER_ACTION_COMPLETED
from ...cvu.utils import get_cvu
from ...data.schema import CVUStoredDefinition
import time

# Cell
LOGIN_CVU = "passwordAuth.cvu"

# Cell
# hide

class PasswordAuthenticator:
    MAX_LOGIN_ATTEMPTS = 10
    SLEEP_INTERVAL = 1.0
    MAX_POLL_TIME = 10

    def __init__(self, client, pluginRun):
        self.client = client
        self.pluginRun = pluginRun
        self.isTest = False

    def authenticate(self, plugin):
        self.request_user_credentials()

        login_success = False
        for _ in range(self.MAX_LOGIN_ATTEMPTS):
            username, password = self.poll_credentials()
            try:
                plugin.login(username, password)
                login_success = True
                break
            except Exception:
                print("Login failed, invalid credentials.")
                login_success = False

        if not login_success:
            self.pluginRun.status = "error"
            self.client.update_item(self.pluginRun)
            raise RuntimeError("Reached max login attempts.")

    def request_user_credentials(self):
        cvu = get_cvu(LOGIN_CVU)
        self.client.create(cvu)
        self.pluginRun.add_edge("view", cvu)
        self.client.create_edge(self.pluginRun.get_edges("view")[0])
        self.pluginRun.status = "userActionNeeded"
        self.client.update_item(self.pluginRun)

    def poll_credentials(self):
        # request username and password from the user client
        # WAIT HERE = BLOCK
        start_time = time.time()
        while True:
            if time.time() - start_time > self.MAX_POLL_TIME:
                raise RuntimeError("Stop polling, max time reached.")
            print("polling for credentials...")
            sleep(self.SLEEP_INTERVAL)
            self.pluginRun = self.client.get(self.pluginRun.id)
            if self.pluginRun.status == RUN_USER_ACTION_COMPLETED:
                account = self.pluginRun.account[0]
                return account.identifier, account.secret
