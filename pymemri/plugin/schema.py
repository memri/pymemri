# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/plugin.schema.ipynb (unless otherwise specified).

__all__ = ['PluginRun', 'PersistentState']

# Cell
# hide
import random
import string
import json
from ..data.itembase import Item

# Cell
# hide
class PluginRun(Item):
    properties = Item.properties + ["containerImage", "pluginModule", "pluginName", "state", "targetItemId",
                                    "oAuthUrl", "error", "config"]
    edges = Item.edges + ["view", "persistentState"]

    def __init__(self, containerImage, pluginModule, pluginName, state=None, config=None, view=None,
                 targetItemId=None, oAuthUrl=None, error=None, persistentState=None, **kwargs):
        """
                PluginRun defines a the run of plugin `plugin_module.plugin_name`,
        with an optional `config` string.

        Args:
            plugin_module (str): module of the plugin.
            plugin_name (str): class name of the plugin.
            config (str, optional): Optional plugin configuration. For example,
                this could be a `json.dumps` of a configuration dict. Defaults to None.
        """
        super().__init__(**kwargs)
        self.pluginModule = pluginModule
        self.pluginName = pluginName
        self.containerImage = containerImage
        id_ = targetItemId or ''.join(random.choices(string.hexdigits, k=32))
        self.targetItemId = id_
        self.config = config
        self.id = id_
        self.state = state          # for stateful plugins
        self.oAuthUrl = oAuthUrl    # for authenticated plugins
        self.error = error          # universa

        self.persistentState = persistentState or []
        self.view = view or []

    @property
    def config(self) -> dict:
        """Return config of PluginRun instance"""

        return self._config

    @config.setter
    def config(self, config):
        """Set config for PluginRun instance"""

        self._config = json.loads(config) if config else None

# Cell
# hide
class PersistentState(Item):
    """ Persistent state variables saved for plugin such as views, accounts, the last state to resume from etc. """

    properties = Item.properties + ["pluginId", "state"]
    edges = Item.edges + ["account", "view"]

    def __init__(self, pluginName=None, state=None, account=None, view=None, **kwargs):
        super().__init__(**kwargs)
        self.pluginName = pluginName
        self.state = state
        self.account = account if account is not None else []
        self.view = view if view is not None else []

    def get_state(self):
        return self.state

    def set_state(self, client, state_str):
        self.state = state_str
        client.update_item(self)

    def get_account(self):
        if len(self.account) == 0:
            return None
        else:
            return self.account[0]

    def set_account(self, client, account):
        if len(self.account) == 0:
            if not account.id:
                client.create(account)
            self.add_edge('account', account)
            self.update(client)
        else:
            existing_account = self.account[0]
            for prop in account.properties:
                value = getattr(account, prop, None)
                if value and hasattr(existing_account, prop):
                    setattr(existing_account, prop, value)
            existing_account.update(client)

    def get_view_by_name(self, view_name):
        for cvu in self.view:
            if cvu.name == view_name:
                return cvu

    def set_views(self, client, views=None):
        for view in views:
            client.create(view)
            self.add_edge('view', view)
        self.update(client)
        return True