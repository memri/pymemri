# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/plugin.schema.ipynb (unless otherwise specified).

__all__ = ['Account', 'PluginRun']

# Cell
# hide
import random, string
from typing import Optional

from ..data.itembase import Item

# Cell
# hide
class Account(Item):

    properties = Item.properties + [
        "service",
        "identifier",
        "secret",
        "code",
        "refreshToken",
        "errorMessage",
        "accessToken"
    ]
    edges = Item.edges + ['belongsTo', 'contact']

    def __init__(
        self,
        service: str = None,
        identifier: str = None,
        secret: str = None,
        code: str = None,
        refreshToken: str = None,
        errorMessage: str = None,
        accessToken: str = None,
        belongsTo: list = None,
        contact: list = None,
        **kwargs
    ):
        super().__init__(**kwargs)

        # Properties
        self.service: Optional[str] = service
        self.identifier: Optional[str] = identifier
        self.secret: Optional[str] = secret
        self.refreshToken: Optional[str] = refreshToken
        self.code: Optional[str] = code
        self.errorMessage: Optional[str] = errorMessage
        self.accessToken: Optional[str] = accessToken
        self.contact: list = contact if contact is not None else []
        self.belongsTo: list = belongsTo if belongsTo is not None else []

# Cell
# hide
class PluginRun(Item):
    properties = Item.properties + [
        "containerImage",
        "pluginModule",
        "pluginName",
        "status",
        "targetItemId",
        "authUrl",
        "error",
        "settings",
    ]
    edges = Item.edges + ["view", "persistentState", "account"]

    def __init__(
        self,
        containerImage: str = None,
        pluginModule: str = None,
        pluginName: str = None,
        status: str = None,
        settings: str = None,
        targetItemId: str = None,
        authUrl: str = None,
        error: str = None,
        persistentState: list = None,
        account: list = None,
        view: list = None,
        **kwargs
    ):
        super().__init__(**kwargs)
        id_ = (
            "".join([random.choice(string.hexdigits) for i in range(32)])
            if targetItemId is None
            else targetItemId
        )

        # Properties
        self.pluginModule: Optional[str] = pluginModule
        self.pluginName: Optional[str] = pluginName
        self.containerImage: Optional[str] = containerImage
        self.targetItemId: Optional[str] = id_
        self.id: Optional[str] = id_
        self.status: Optional[str] = status
        self.settings: Optional[str] = settings
        self.authUrl: Optional[str] = authUrl
        self.error: Optional[str] = error

        # Edges
        self.account: list = account if account is not None else []
        self.persistentState: list = persistentState if persistentState is not None else []
        self.view: list = view if view is not None else []