# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/plugin.authenticated.ipynb (unless otherwise specified).

__all__ = ['RUN_STATE_POLLING_INTERVAL', 'RUN_USER_ACTION_TIMEOUT', 'AuthenticatedPlugin']

# Cell
from ..data.schema import Item, CVUStoredDefinition, Account
from .stateful import StatefulPlugin
import abc
import logging
from time import time, sleep

# Cell
RUN_STATE_POLLING_INTERVAL = 0.6
RUN_USER_ACTION_TIMEOUT = 120

# Cell
class AuthenticatedPlugin(StatefulPlugin):

    def __init__(self, runId=None, **kwargs):
        super().__init__(runId=runId, **kwargs)

    @abc.abstractmethod
    def start_auth(self, client):
        raise NotImplementedError()

    def get_account_from_plugin(self, client, pluginName=None):
        # Find persistent plugin state
        persistent_state = self.get_state(client, pluginName)
        return persistent_state.get_account()

    def ask_user_for_accounts(self, client, view, oauth_url=None):
        # start userActionNeeded flow
        self.action_required(client)

        self.set_run_vars(client, {'oAuthUrl': oauth_url})
        self.set_run_view(client, view)

        # poll here
        start_time = time()
        # handle timeouts
        while RUN_USER_ACTION_TIMEOUT > time() - start_time:
            sleep(RUN_STATE_POLLING_INTERVAL)
            if self.is_action_completed(client):
                # Now the client has set up the account as an edge to the plugin
                return self.get_account_from_plugin(client)

        raise Exception("PluginFlow: User input timeout")

    def set_account_vars(self, client, vars_dictionary):
        account = self.get_account_from_plugin(client)
        if account:
            for k,v in vars_dictionary.items():
                setattr(account, k, v)
            account.update(client)
        else:
            # Create account item
            account = Account(**vars_dictionary)
            # Save accounts as an edge to the plugin
            client.create(account)
            # add the account to the plugin item
            plugin = client.get(self.persistenceId)
            plugin.add_edge('account', account)
            plugin.update(client)

    def add_to_schema(self, client):
        super().add_to_schema(client)
        client.add_to_schema(Account(identifier="", secret="", code="", refreshToken="", \
            service="", handle="", displayName="", avatarUrl="", externalId="", errorMessage=""))
